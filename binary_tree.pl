% Tara Collins, student ID: 15416228

% EmptyBT, the empty binary tree
emptyBT(t(nil)).

% Used to validate the binary tree
checkbig(_, nil).
checkbig(X, t(Y, _, _)) :- Y =< X.
checksmall(_, nil).
checksmall(X, t(Y, _, _)) :- Y > X.

% bTree(N,T1,T2) that is true if N is the root of a binary tree with left subtree T1 and right subtree T2.
% Where all the items in T1 are less than or equal to N and all the items in T2 are greater than N.
bTree(nil).
bTree(t(N, L, R)) :- checkbig(N, L), checksmall(N, R), bTree(L), bTree(R).

% Insert(I, T1, T2) is true if T2 is the binary tree resulting from I being inserted into binary tree T1.
insert(I, nil, t(I ,nil, nil)).
insert(I, t(Y, L, R), t(Y, LL, R)) :- I =< Y, insert(I, L, LL).
insert(I, t(Y, L, R), t(Y, L, RL)) :- insert(I, R, RL).

% preorder(T, L) is true if L is a list of nodes generated by a preorder traversal of the binary tree T.
preorder(T, L) :- precheck(T, L).
precheck(nil, []).
precheck(t(X, L, R), [X | List]) :- precheck(L, LL), precheck(R, RL), append(LL, RL, List).

% inorder(T,L) is true if L is a list of nodes generated by a inorder traversal of the binary tree T.
inorder(T, L) :- incheck(T, L).
incheck(nil, []).
incheck(t(X, L, R), List) :- incheck(L, LL), incheck(R, RL), append(LL, [X | RL], List).

% postorder(T, L) is true if L is a list of nodes generated by a postorder traversal of the binary tree T.
postorder(T, L) :- postcheck(T, L).
postcheck(nil, []).
postcheck(t(X, L, R), List) :- postcheck(L, LL), postcheck(R, RL), append(LL, RL, List1), append(List1, [X], List).

% search(T, I) is true if I is contained in the binary tree T.
search(t(I, _, _), I).
search(t(I, L, _), Y) :- Y =< I, search(L, Y).
search(t(_, _, R), Y) :- search(R, Y).

% height(T, H) is true if H is the height of the binary tree T. An empty tree has height 0 and a tree with one item has height 1.
height(nil, 0).
height(t(_, L, R), H) :- height(L, LL), height(R, RL), H is max(LL, RL) + 1.
